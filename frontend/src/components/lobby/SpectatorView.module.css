/* SpectatorView Component Styles */

.spectatorView {
  gap: var(--space-lg);
  padding: var(--space-lg);
  min-height: 100vh;
  background: linear-gradient(135deg, var(--color-green) 0%, var(--color-brown) 100%);
}

/* Applied utility: flex-column */
.spectatorView {
  composes: flex-column from '../../styles/utilities/index.css';
}

.spectatorHeader {
  padding: var(--space-base);
  background: var(--bg-overlay-dark);
  border: var(--border-light);
}

/* Applied utilities: flex-start-between rounded-lg */
.spectatorHeader {
  composes: flex-start-between rounded-lg from '../../styles/utilities/index.css';
}

.headerInfo h2 {
  color: var(--text-white);
  font-size: var(--text-xl);
  font-weight: var(--font-semibold);
  margin: 0 0 var(--space-sm) 0;
  text-shadow: var(--text-shadow);
}

.gamePhase {
  gap: var(--space-sm);
}

/* Applied utility: flex-wrap */
.gamePhase {
  composes: flex-wrap from '../../styles/utilities/index.css';
}

.spectatorActions {
  gap: var(--space-md);
}

/* Applied utility: flex-wrap */
.spectatorActions {
  composes: flex-wrap from '../../styles/utilities/index.css';
}

.viewControls {
  padding: var(--space-base);
  background: var(--bg-overlay-light);
  border: var(--border-subtle);
}

/* Applied utilities: flex-between rounded-md */
.viewControls {
  composes: flex-between rounded-md from '../../styles/utilities/index.css';
}

.controlGroup {
  display: flex;
  align-items: center;
  gap: var(--space-sm);
}

.controlGroup label {
  color: var(--text-white);
  font-size: var(--text-sm);
  font-weight: var(--font-medium);
  display: flex;
  align-items: center;
  gap: var(--space-sm);
  cursor: pointer;
}

.controlGroup input[type="checkbox"] {
  width: var(--size-4);
  height: var(--size-4);
  accent-color: var(--color-blue);
}

.playerSelector {
  display: flex;
  align-items: center;
  gap: var(--space-sm);
}

.playerSelector label {
  color: var(--text-white);
  font-size: var(--text-sm);
  font-weight: var(--font-medium);
}

.playerSelector select {
  padding: var(--space-xs) var(--space-sm);
  border: var(--border-input);
  border-radius: var(--radius-sm);
  background: var(--bg-input);
  color: var(--text-white);
  font-size: var(--text-sm);
  min-width: var(--size-38);
}

.playerSelector select:focus {
  outline: var(--focus-ring);
  outline-offset: var(--focus-offset);
}

.gameContent {
  display: flex;
  flex-direction: column;
  gap: var(--space-lg);
}

.gameBoard {
  background: var(--bg-overlay-light);
  border: var(--border-subtle);
  border-radius: var(--radius-lg);
  padding: var(--space-base);
}

.allHands h3,
.focusedPlayer h3 {
  color: var(--text-white);
  font-size: var(--text-lg);
  font-weight: var(--font-semibold);
  margin: 0 0 var(--space-base) 0;
  text-shadow: var(--text-shadow);
}

.handsGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(var(--size-75), 1fr));
  gap: var(--space-base);
}

.playerHandContainer {
  background: var(--bg-surface-subtle);
  border: var(--border-thick-subtle);
  border-radius: var(--radius-lg);
  padding: var(--space-base);
  transition: var(--transition-all);
  cursor: pointer;
}

.playerHandContainer:hover {
  background: var(--bg-surface-hover);
  border-color: var(--border-light-alpha);
  transform: var(--transform-hover);
}

.selected {
  background: var(--bg-selected) !important;
  border-color: var(--border-selected) !important;
}

.playerInfo {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--space-md);
}

.playerInfo h4 {
  color: var(--text-white);
  font-size: var(--text-base);
  font-weight: var(--font-semibold);
  margin: 0;
}

.spectatorHand {
  margin: var(--space-md) 0;
}

.handStats {
  text-align: center;
  color: var(--text-muted);
  font-size: var(--text-xs);
  font-weight: var(--font-medium);
}

.spectatorList {
  background: var(--bg-overlay-dark);
  border: var(--border-light);
}

.spectatorListHeader {
  padding: var(--space-base) var(--space-base) var(--space-sm) var(--space-base);
  border-bottom: var(--border-subtle);
}

.spectatorListHeader h4 {
  color: var(--text-white);
  font-size: var(--text-base);
  font-weight: var(--font-semibold);
  margin: 0;
}

.spectatorItems {
  padding: var(--space-sm);
}

.noSpectators {
  color: var(--text-dim);
  font-style: italic;
  text-align: center;
  padding: var(--space-base);
  margin: 0;
}

.spectatorItem {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--space-sm) var(--space-md);
  border-radius: var(--radius-sm);
  transition: var(--transition-bg);
}

.spectatorItem:hover {
  background: var(--bg-surface-subtle);
}

.currentSpectator {
  background: var(--bg-selected);
  border: var(--border-selected);
}

.spectatorName {
  color: var(--text-white);
  font-size: var(--text-sm);
  font-weight: var(--font-medium);
  display: flex;
  align-items: center;
  gap: var(--space-sm);
}

.joinTime {
  color: var(--text-dim);
  font-size: var(--text-xs);
}

/* Position-specific styling for player hands */
.north {
  border-top: 3px solid var(--color-blue);
}

.east {
  border-right: 3px solid var(--color-gold);
}

.south {
  border-bottom: 3px solid var(--color-blue);
}

.west {
  border-left: 3px solid var(--color-gold);
}

/* Responsive design */
@media (max-width: 768px) {
  .spectatorView {
    padding: var(--space-base);
    gap: var(--space-base);
  }

  .spectatorHeader {
    flex-direction: column;
    gap: var(--space-base);
    align-items: stretch;
  }

  .headerInfo h2 {
    font-size: var(--text-lg);
    text-align: center;
  }

  .gamePhase {
    justify-content: center;
  }

  .spectatorActions {
    justify-content: center;
  }

  .viewControls {
    flex-direction: column;
    gap: var(--space-base);
    align-items: stretch;
  }

  .handsGrid {
    grid-template-columns: 1fr;
    gap: var(--space-md);
  }

  .playerHandContainer {
    padding: var(--space-md);
  }

  .spectatorItem {
    flex-direction: column;
    gap: var(--space-xs);
    text-align: center;
  }
}

@media (max-width: 480px) {
  .spectatorView {
    padding: var(--space-md);
  }

  .headerInfo h2 {
    font-size: var(--text-base);
  }

  .playerInfo {
    flex-direction: column;
    gap: var(--space-sm);
    text-align: center;
  }

  .spectatorActions {
    flex-direction: column;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .spectatorView {
    background: var(--color-black);
  }

  .spectatorHeader {
    background: var(--bg-primary-alpha);
    border-color: var(--color-black);
  }

  .headerInfo h2 {
    color: var(--color-black);
    text-shadow: none;
  }

  .controlGroup label,
  .playerSelector label {
    color: var(--color-black);
  }

  .playerSelector select {
    background: var(--color-white);
    color: var(--color-black);
    border-color: var(--color-black);
  }

  .playerHandContainer {
    background: var(--bg-primary-alpha);
    border-color: var(--color-black);
  }

  .playerInfo h4 {
    color: var(--color-black);
  }

  .spectatorList {
    background: var(--bg-primary-alpha);
    border-color: var(--color-black);
  }

  .spectatorListHeader h4 {
    color: var(--color-black);
  }

  .spectatorName {
    color: var(--color-black);
  }

  .joinTime {
    color: var(--color-gray-600);
  }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  .playerHandContainer {
    transition: none;
  }

  .playerHandContainer:hover {
    transform: none;
  }

  .spectatorItem {
    transition: none;
  }
}

/* Focus management */
.spectatorView:focus-within {
  outline: none;
}

.playerHandContainer:focus {
  outline: var(--focus-ring);
  outline-offset: var(--focus-offset);
}

/* Loading states */
.spectatorView[data-loading="true"] {
  opacity: var(--opacity-disabled);
  pointer-events: none;
}

/* Animation for spectator joining/leaving */
@keyframes spectatorJoin {
  from {
    opacity: 0;
    transform: var(--transform-enter);
  }
  to {
    opacity: 1;
    transform: var(--transform-none);
  }
}

.spectatorItem[data-new="true"] {
  animation: spectatorJoin var(--duration-short) var(--ease-out);
}

@media (prefers-reduced-motion: reduce) {
  .spectatorItem[data-new="true"] {
    animation: none;
  }
}
